<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Mezalor</title>
    <link>http://example.org/tags/java/</link>
    <description>Recent content in java on Mezalor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Thu, 12 Nov 2020 14:26:00 +0100</lastBuildDate><atom:link href="http://example.org/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java, lambda et jointure de chaines</title>
      <link>http://example.org/posts/2020-11-12-java-lambda-et-jointure-de-chaines/</link>
      <pubDate>Thu, 12 Nov 2020 14:26:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2020-11-12-java-lambda-et-jointure-de-chaines/</guid>
      <description>Faire une concaténation de chaînes avec les lambdas :
@Test public void testFoo() throws Exception { List&amp;lt;String&amp;gt; l = Arrays.asList(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;); assertEquals(&amp;#34;[a],[b],[c]&amp;#34;, l.stream().map(v-&amp;gt;String.format(&amp;#34;[%s]&amp;#34;, v)).collect(Collectors.joining(&amp;#34;,&amp;#34;))); } </description>
    </item>
    
    <item>
      <title>java, regexp nommées</title>
      <link>http://example.org/posts/2020-10-07-java-regexp-nommees/</link>
      <pubDate>Wed, 07 Oct 2020 22:50:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2020-10-07-java-regexp-nommees/</guid>
      <description>Nommer un groupe et l&amp;rsquo;utiliser :
@Test public void testFoo() { Pattern p = Pattern.compile(&amp;#34;Voici le nombre : (?&amp;lt;nombre&amp;gt;\\d+)&amp;#34;); Matcher m = p.matcher(&amp;#34;Voici le nombre : 123&amp;#34;); assertTrue(m.matches()); assertEquals(&amp;#34;123&amp;#34;, m.group(&amp;#34;nombre&amp;#34;)); } </description>
    </item>
    
    <item>
      <title>java, forcer l&#39;ordre d&#39;exécution des tests unitaires</title>
      <link>http://example.org/posts/2018-12-18-java-forcer-l-ordre-d-execution-des-tests-unitaires/</link>
      <pubDate>Tue, 18 Dec 2018 11:59:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2018-12-18-java-forcer-l-ordre-d-execution-des-tests-unitaires/</guid>
      <description>Parfois, des tests unitaires plantent lorsqu&amp;rsquo;ils sont exécutés dans un certain ordre.
Aujourd&amp;rsquo;hui, c&amp;rsquo;est le cas et pour reproduire le problème, j&amp;rsquo;ai utilisé cette annotation qui permet de spécifier l&amp;rsquo;ordre que l&amp;rsquo;on souhaite utiliser lors de l&amp;rsquo;exécution de tous les tests de la classe.
import org.junit.FixMethodOrder; import org.junit.Test; import org.junit.runners.MethodSorters; @FixMethodOrder(MethodSorters.NAME_ASCENDING) public class TestMethodOrder { @Test public void testA() { System.out.println(&amp;#34;first&amp;#34;); } @Test public void testB() { System.out.println(&amp;#34;second&amp;#34;); } @Test public void testC() { System.</description>
    </item>
    
    <item>
      <title>Java, convertir un fichier alaw en pcm</title>
      <link>http://example.org/posts/2017-11-24-java-convertir-un-fichier-alaw-en-pcm/</link>
      <pubDate>Fri, 24 Nov 2017 15:09:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2017-11-24-java-convertir-un-fichier-alaw-en-pcm/</guid>
      <description>Dans un billet précédent, je parlais d&amp;rsquo;un petit player en html5 qui devait jouer des wav. Je convertissais les wav en mp3 pour la compatibilité des navigateurs.
Lors de l&amp;rsquo;intégration de celui-ci dans l&amp;rsquo;IHM d&amp;rsquo;administration du serveur vocal, j&amp;rsquo;ai eu quelques soucis de conversion&amp;hellip;
La conversion en mp3 ne fonctionnait pas car les fichiers en entrée n&amp;rsquo;étaient pas des vrais &amp;ldquo;wav&amp;rdquo;&amp;hellip; C&amp;rsquo;étaient des fichiers A-law !
ACCUEIL_CHOIX_TARIFS.wav: RIFF (little-endian) data, WAVE audio, ITU G.</description>
    </item>
    
    <item>
      <title>Java, convertir des wav en mp3</title>
      <link>http://example.org/posts/2017-09-27-java-convertir-des-wav-en-mp3/</link>
      <pubDate>Wed, 27 Sep 2017 16:49:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2017-09-27-java-convertir-des-wav-en-mp3/</guid>
      <description>Je maintiens une IHM d&amp;rsquo;administration dans laquelle un petit player flash permet d&amp;rsquo;écouter des fichiers wav.
Le passage au player html5 a été laborieux.
Le player devait s&amp;rsquo;afficher dans une popup (on utilisait auparavant qtip mais le passage à html5 faisait planter le rendu aléatoirement) et un problème d&amp;rsquo;affichage du temps total du morceau était présent de temps à autre (cf solution dans billet précédent).
Une fois la popup affichée et le problème de temps résolu, je me suis heurté à un autre problème de taille&amp;hellip;</description>
    </item>
    
    <item>
      <title>java, accéder à une méthode de même nom dans la classe encapsulande depuis une classe anonyme</title>
      <link>http://example.org/posts/2016-08-27-java-acceder-a-une-methode-de-meme-nom-dans-la-classe-encapsulande-depuis-une-classe-anonyme/</link>
      <pubDate>Sat, 27 Aug 2016 06:18:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2016-08-27-java-acceder-a-une-methode-de-meme-nom-dans-la-classe-encapsulande-depuis-une-classe-anonyme/</guid>
      <description>Pour ce faire, il faut utiliser ParamTransform.this pour que la compilation n&amp;rsquo;échoue pas.
public abstract class ParamTransform&amp;lt;Init,In,Out&amp;gt; implements Transform&amp;lt;Init,Transform&amp;lt;In,Out&amp;gt;&amp;gt; { public abstract Out apply(Init values, In value); public final Transform&amp;lt;In, Out&amp;gt; apply(final Init values) { return new Transform&amp;lt;In, Out&amp;gt;() { public Out apply(In value) { return ParamTransform.this.apply(values, value); } }; } } </description>
    </item>
    
    <item>
      <title>Java, retirer les accents d&#39;une chaîne</title>
      <link>http://example.org/posts/2016-03-16-java-retirer-les-accents-d-une-chaine/</link>
      <pubDate>Wed, 16 Mar 2016 11:10:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2016-03-16-java-retirer-les-accents-d-une-chaine/</guid>
      <description>Voici le code qui permet de supprimer les accents d&amp;rsquo;une chaîne de caractères.
public String removeAccents(String text) { String libelle = Normalizer.normalize(text, Normalizer.Form.NFD); return libelle.replaceAll(&amp;#34;\\p{Mn}+&amp;#34;, &amp;#34;&amp;#34;); } @Test public void removeAccents() { String withAccents = &amp;#34;Portez ce vieux whisky au juge blond qui fume sur son île intérieure, à côté de l&amp;#39;alcôve ovoïde, où les bûches se consument dans l&amp;#39;âtre, ce qui lui permet de penser à la cænogénèse de l&amp;#39;être dont il est question dans la cause ambiguë entendue à Moÿ, dans un capharnaüm qui, pense-t-il, diminue çà et là la qualité de son œuvre.</description>
    </item>
    
    <item>
      <title>java, mockito espionner le retour d&#39;une fonction</title>
      <link>http://example.org/posts/2016-02-18-java-mockito-espionner-le-retour-d-une-fonction/</link>
      <pubDate>Thu, 18 Feb 2016 09:42:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2016-02-18-java-mockito-espionner-le-retour-d-une-fonction/</guid>
      <description>Le code n&amp;rsquo;est pas beau, mais au moins il est copiable directement en test unitaire pour manipuler et tester !
@Test public void testFoo() throws Exception { class ResultCaptor implements Answer&amp;lt;String&amp;gt; { private String result; String getResult() { return result; } @Override public String answer(InvocationOnMock invocationOnMock) throws Throwable { result = (String) invocationOnMock.callRealMethod(); return result; } } class MyClazz { public String f(String param) { return &amp;#34;out=&amp;#34; + param; } } MyClazz a = new MyClazz(); MyClazz spy = spy(a); ResultCaptor answer = new ResultCaptor(); when(spy.</description>
    </item>
    
    <item>
      <title>java, gestion des messages au singulier et pluriel</title>
      <link>http://example.org/posts/2015-02-19-java-gestion-des-messages-au-singulier-et-pluriel/</link>
      <pubDate>Thu, 19 Feb 2015 15:15:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2015-02-19-java-gestion-des-messages-au-singulier-et-pluriel/</guid>
      <description>Java propose depuis longtemps la possibilité de gérer les singuliers/pluriels via MessageFormat.
Vous trouverez ci-dessous un exemple au travers de tests unitaires.
Maintenant, fini les rustines dans le code pour les libellés !
import junit.framework.TestCase; import java.text.MessageFormat; public class FooTest extends TestCase { public void testPlural() { String formatPattern = &amp;#34;The directory {0} contains {1,choice,0#no file|1#one file|1&amp;lt;{1,number,integer} files}.&amp;#34;; assertEquals(&amp;#34;The directory XYZ contains no file.&amp;#34;, MessageFormat.format(formatPattern, &amp;#34;XYZ&amp;#34;, 0)); assertEquals(&amp;#34;The directory XYZ contains one file.</description>
    </item>
    
    <item>
      <title>Java, renvoyer un fichier binaire via une servlet</title>
      <link>http://example.org/posts/2013-01-08-java-renvoyer-un-fichier-binaire-via-une-servlet/</link>
      <pubDate>Tue, 08 Jan 2013 17:22:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2013-01-08-java-renvoyer-un-fichier-binaire-via-une-servlet/</guid>
      <description>package xxxx; import java.io.FileInputStream; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.ServletOutputStream; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.apache.commons.io.IOUtils; public class GetManualServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { resp.setContentType(&amp;#34;application/msword&amp;#34;); resp.addHeader( &amp;#34;Content-Transfer-Encoding&amp;#34;, &amp;#34;binary&amp;#34; ); resp.addHeader(&amp;#34;Pragma&amp;#34;, &amp;#34;no-cache&amp;#34;); resp.addHeader(&amp;#34;Cache-Control&amp;#34;, &amp;#34;no-cache, max-age=0, must-revalidate&amp;#34;); resp.addHeader(&amp;#34;Content-Disposition&amp;#34;, &amp;#34;attachment; fileName=\&amp;#34;ManuelUtilisateur.docx\&amp;#34;;&amp;#34;); String path = getServletContext().getRealPath(&amp;#34;doc/ManuelUtilisateur.docx&amp;#34;); FileInputStream in = new FileInputStream(path); try { ServletOutputStream out = resp.getOutputStream(); IOUtils.copy(in, out); out.flush(); } finally { in.</description>
    </item>
    
    <item>
      <title>java, déboires d&#39;encoding...</title>
      <link>http://example.org/posts/2012-09-25-java-deboires-d-encoding/</link>
      <pubDate>Tue, 25 Sep 2012 12:47:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2012-09-25-java-deboires-d-encoding/</guid>
      <description>Il y a quelques temps, j&amp;rsquo;ai eu de petits problèmes d&amp;rsquo;affichage d&amp;rsquo;accents sur une IHM d&amp;rsquo;un fichier qui était fourni par une autre appplication.
Le charset n&amp;rsquo;était pas le bon.
Il a fallu que je force l&amp;rsquo;écriture du charset et sa lecture.
Pour l&amp;rsquo;écriture :
package a.b.c; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.PrintWriter; import java.io.Writer; import javax.servlet.ServletException; import javax.servlet.ServletOutputStream; import javax.servlet.http.HttpServlet; import javax.</description>
    </item>
    
  </channel>
</rss>
