<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iterate on Mezalor</title>
    <link>http://example.org/tags/iterate/</link>
    <description>Recent content in iterate on Mezalor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Thu, 08 May 2014 03:24:00 +0100</lastBuildDate><atom:link href="http://example.org/tags/iterate/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>bash, initialiser un tableau avec le retour d&#39;une commande et itérer dessus</title>
      <link>http://example.org/posts/2014-05-08-bash-initialiser-un-tableau-avec-le-retour-d-une-commande-et-iterer-dessus/</link>
      <pubDate>Thu, 08 May 2014 03:24:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2014-05-08-bash-initialiser-un-tableau-avec-le-retour-d-une-commande-et-iterer-dessus/</guid>
      <description>Cette méthode est sûre concernant les espaces contenus dans les lignes renvoyées par la commande :)
$ tree . ├── a │ ├── a 1 │ └── a 2 ├── b │ ├── b 1 │ └── b 2 └── c ├── c 1 └── c 2 3 directories, 6 files $ mapfile -t files &amp;lt; &amp;lt;(find -type f) $ for file in &amp;#34;${files[@]}&amp;#34;; do &amp;gt; echo &amp;#34;file: $file&amp;#34; &amp;gt; done file: .</description>
    </item>
    
    <item>
      <title>tables de hachage en bash</title>
      <link>http://example.org/posts/2011-05-30-tables-de-hachage-en-bash/</link>
      <pubDate>Mon, 30 May 2011 14:27:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2011-05-30-tables-de-hachage-en-bash/</guid>
      <description>Voici comment déclarer une table de hachage en bash et itérer sur ses clés pour récupérer les valeurs :
declare -A animals animals=( [&amp;#34;moo&amp;#34;]=&amp;#34;cow&amp;#34; [&amp;#34;miaou&amp;#34;]=&amp;#34;cat&amp;#34; ) animals[&amp;#39;dog&amp;#39;]=&amp;#39;wouaf&amp;#39; for i in &amp;#34;${!animals[@]}&amp;#34; do echo &amp;#34;key : $i&amp;#34; echo &amp;#34;value: ${animals[$i]}&amp;#34; done echo &amp;#34;There are ${#animals[@]} animals.&amp;#34; </description>
    </item>
    
  </channel>
</rss>
