<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>awk on Mezalor</title>
    <link>http://example.org/tags/awk/</link>
    <description>Recent content in awk on Mezalor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Thu, 04 Mar 2021 14:50:00 +0100</lastBuildDate><atom:link href="http://example.org/tags/awk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>grep, extraire des données</title>
      <link>http://example.org/posts/2021-03-04-grep-extraire-des-donnees/</link>
      <pubDate>Thu, 04 Mar 2021 14:50:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2021-03-04-grep-extraire-des-donnees/</guid>
      <description>Il est possible d&amp;rsquo;utiliser grep pour extraire des données.
Dans l&amp;rsquo;exemple qui suit, on récupère le nom des compagnies dans un fichier json.
s=&amp;#39;[{&amp;#34;_id&amp;#34;:&amp;#34;6040e2f5ed4a6976ab0e8719&amp;#34;,&amp;#34;index&amp;#34;:0,&amp;#34;guid&amp;#34;:&amp;#34;5b71d966-1df3-4f22-8941-27d83e0181f2&amp;#34;,&amp;#34;isActive&amp;#34;:true,&amp;#34;balance&amp;#34;:&amp;#34;$2,464.05&amp;#34;,&amp;#34;picture&amp;#34;:&amp;#34;http://placehold.it/32x32&amp;#34;,&amp;#34;age&amp;#34;:36,&amp;#34;eyeColor&amp;#34;:&amp;#34;brown&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;House Hays&amp;#34;,&amp;#34;gender&amp;#34;:&amp;#34;male&amp;#34;,&amp;#34;company&amp;#34;:&amp;#34;WEBIOTIC&amp;#34;,&amp;#34;email&amp;#34;:&amp;#34;househays@webiotic.com&amp;#34;,&amp;#34;phone&amp;#34;:&amp;#34;+1 (921) 461-3048&amp;#34;,&amp;#34;address&amp;#34;:&amp;#34;246 Butler Street, Lydia, Federated States Of Micronesia, 8224&amp;#34;,&amp;#34;about&amp;#34;:&amp;#34;Labore proident eu non dolor reprehenderit et qui et pariatur. Consectetur quis incididunt aliqua cupidatat exercitation ex nulla ullamco reprehenderit deserunt. Velit cillum elit esse eu eiusmod cupidatat in fugiat ullamco. Labore labore officia minim sunt do.</description>
    </item>
    
    <item>
      <title>awk</title>
      <link>http://example.org/posts/2019-07-09-awk/</link>
      <pubDate>Tue, 09 Jul 2019 15:44:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2019-07-09-awk/</guid>
      <description>Sur la version du DCG G3 (DCG : Dialog Code Generator)
/* &amp;lt;DCG_EXCEPTION id=&amp;#34;644&amp;#34; label=&amp;#34;idMenu = id du Choix Svi&amp;#34; type=&amp;#34;Action&amp;#34;&amp;gt; */ idMenu = getIdChoix(getSessionSvi(request), choixSvi); /* &amp;lt;/DCG_EXCEPTION&amp;gt; */ this.setReferenceInCtxSession( request, &amp;#34;idMenu&amp;#34;, idMenu ); addLog(request, &amp;#34;CONFIRM DDSLG_objId { Si537a2ba562f88b0ed24e8fab80913509366c055c }&amp;#34;); En migrant sur le DCG G4 on a :
/* &amp;lt;DCG_EXCEPTION id=&amp;#34;644&amp;#34; label=&amp;#34;idMenu = id du Choix Svi&amp;#34; type=&amp;#34;Action&amp;#34;&amp;gt; */ idMenu = getIdChoix(getSessionSvi(request), choixSvi); /* &amp;lt;/DCG_EXCEPTION&amp;gt; */ addLog(request, &amp;#34;CONFIRM DDSLG_objId { Si537a2ba562f88b0ed24e8fab80913509366c055c }&amp;#34;); La mise en session est donc perdue, ce qui provoque des erreurs dans le parcours client.</description>
    </item>
    
    <item>
      <title>sed/awk, remplacer plusieurs occurences entre deux balises html</title>
      <link>http://example.org/posts/2016-03-01-sed-awk-remplacer-plusieurs-occurences-entre-deux-balises-html/</link>
      <pubDate>Tue, 01 Mar 2016 11:27:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2016-03-01-sed-awk-remplacer-plusieurs-occurences-entre-deux-balises-html/</guid>
      <description>sed -ri &amp;#34;/&amp;lt;childProjects&amp;gt;/,/&amp;lt;\/childProjects&amp;gt;/ { s/monsvi-/MAINTENANCE-$GOROCO-monsvi-/g; }&amp;#34; $config_file Attention, il faut prendre garde au cas où les tags html ne seraient pas uniques :
$ cat text.txt &amp;lt;a&amp;gt; &amp;lt;b&amp;gt;toto&amp;lt;/b&amp;gt; &amp;lt;c&amp;gt;toto&amp;lt;/c&amp;gt; &amp;lt;b&amp;gt;toto&amp;lt;/b&amp;gt; &amp;lt;/a&amp;gt; $ cat text.txt | sed -r &amp;#39;/&amp;lt;b&amp;gt;/,/&amp;lt;\/b&amp;gt;/ { s/toto/t*t*/g; }&amp;#39; &amp;lt;a&amp;gt; &amp;lt;b&amp;gt;t*t*&amp;lt;/b&amp;gt; &amp;lt;c&amp;gt;t*t*&amp;lt;/c&amp;gt; &amp;lt;b&amp;gt;t*t*&amp;lt;/b&amp;gt; &amp;lt;/a&amp;gt; Si on a la chance que le tag de fin est sur la même ligne :
$ cat text.txt | sed -r &amp;#39;/&amp;lt;b&amp;gt;/,0 { s/toto/t*t*/g; }&amp;#39;&amp;lt;a&amp;gt; &amp;lt;b&amp;gt;t*t*&amp;lt;/b&amp;gt; &amp;lt;c&amp;gt;toto&amp;lt;/c&amp;gt; &amp;lt;b&amp;gt;t*t*&amp;lt;/b&amp;gt; &amp;lt;/a&amp;gt; Toutefois, je conseille de préférer awk dont le comportement est plus sûr.</description>
    </item>
    
    <item>
      <title>Github, script de remplacement de chaines de caractères</title>
      <link>http://example.org/posts/2015-01-29-github-script-de-remplacement-de-chaines-de-caracteres/</link>
      <pubDate>Thu, 29 Jan 2015 21:39:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2015-01-29-github-script-de-remplacement-de-chaines-de-caracteres/</guid>
      <description>sed et awk sont très bien pour remplacer des chaines par d&amp;rsquo;autres.
Toutefois, le fait que ce soit des regexp qu&amp;rsquo;ils attendent complique l&amp;rsquo;utilisation lorsque la chaine fixe recherchée contient des caractères pouvant être interprétés comme des &amp;ldquo;opérateurs&amp;rdquo; de rexexp (? par exemple)
sandr est un outil qui permet de faire des recherches de chaines fixes ou non. Des options permettent d&amp;rsquo;extraire les chaines matchées/remplacées dans un fichier et d&amp;rsquo;appliquer des remplacements de masse (via une table de hachage).</description>
    </item>
    
    <item>
      <title>bash, récupérer la n-ième ligne ou les lignes x à y d&#39;un fichier</title>
      <link>http://example.org/posts/2012-10-17-bash-recuperer-la-n-ieme-ligne-ou-les-lignes-x-a-y-d-un-fichier/</link>
      <pubDate>Wed, 17 Oct 2012 11:05:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2012-10-17-bash-recuperer-la-n-ieme-ligne-ou-les-lignes-x-a-y-d-un-fichier/</guid>
      <description>On peut utiliser awk avec NR (numéro de ligne tout fichier confondus) ou FNR (numéro de ligne du fichier) :
### afficher la 3e ligne $ awk &amp;#39;NR==3 { print; exit; }&amp;#39; /etc/passwd bin:x:2:2:bin:/bin:/bin/sh ### afficher les lignes 3 à 6 $ awk &amp;#39;3&amp;lt;=NR &amp;amp;&amp;amp; NR&amp;lt;=6 { print; }&amp;#39; /etc/passwd bin:x:2:2:bin:/bin:/bin/sh sys:x:3:3:sys:/dev:/bin/sh sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/bin/sh Ou bien avec sed :
$ cat /etc/passwd | sed &amp;#39;3!d&amp;#39; bin:x:2:2:bin:/bin:/usr/sbin/nologin $ cat /etc/passwd | sed &amp;#39;3,6!</description>
    </item>
    
    <item>
      <title>bash, supprimer les lignes vides d&#39;un fichier</title>
      <link>http://example.org/posts/2012-10-17-bash-supprimer-les-lignes-vides-d-un-fichier/</link>
      <pubDate>Wed, 17 Oct 2012 10:06:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2012-10-17-bash-supprimer-les-lignes-vides-d-un-fichier/</guid>
      <description>Voici plusieurs solutions
$ cat ~/fichier | sed -e &amp;#39;s/^[[:space:]]*$//;/^$/d&amp;#39; $ cat ~/fichier | awk NF où NF indique le nombre de champs. Si ce n&amp;rsquo;est pas une ligne vide, le nombre de champs est positif et la commande par défaut de awk est d&amp;rsquo;afficher. Ce qui équivaut à :
$ cat ~/fichier | awk &amp;#39;NF!=0 { print }&amp;#39; </description>
    </item>
    
    <item>
      <title>awk, un exemple pour bien débuter et comprendre...</title>
      <link>http://example.org/posts/2012-10-15-awk-un-exemple-pour-bien-debuter-et-comprendre/</link>
      <pubDate>Mon, 15 Oct 2012 17:05:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2012-10-15-awk-un-exemple-pour-bien-debuter-et-comprendre/</guid>
      <description>$ cat file.txt Firstname;Lastname John;Doe Jane;Doe Paul;Smith #end of file with a ; character $ for b in b b1 b2; do awk -F &amp;#39;;&amp;#39; -v base=$b -v fmt=&amp;#39;use %s; insert into Users values (&amp;#34;%s&amp;#34;, &amp;#34;%s&amp;#34;);\n&amp;#39; &amp;#39;NR&amp;gt;=2 &amp;amp;&amp;amp; /;/ &amp;amp;&amp;amp; !/^#/ {printf fmt, base, $1, $2}&amp;#39; file.txt done use b; insert into Users values (&amp;#34;John&amp;#34;, &amp;#34;Doe&amp;#34;); use b; insert into Users values (&amp;#34;Jane&amp;#34;, &amp;#34;Doe&amp;#34;); use b; insert into Users values (&amp;#34;Paul&amp;#34;, &amp;#34;Smith&amp;#34;); use b1; insert into Users values (&amp;#34;John&amp;#34;, &amp;#34;Doe&amp;#34;); use b1; insert into Users values (&amp;#34;Jane&amp;#34;, &amp;#34;Doe&amp;#34;); use b1; insert into Users values (&amp;#34;Paul&amp;#34;, &amp;#34;Smith&amp;#34;); use b2; insert into Users values (&amp;#34;John&amp;#34;, &amp;#34;Doe&amp;#34;); use b2; insert into Users values (&amp;#34;Jane&amp;#34;, &amp;#34;Doe&amp;#34;); use b2; insert into Users values (&amp;#34;Paul&amp;#34;, &amp;#34;Smith&amp;#34;); awk n&amp;rsquo;est pas si compliqué que ça lorsque l&amp;rsquo;on comprend la philosophie&amp;hellip;</description>
    </item>
    
    <item>
      <title>awk, créer des requêtes SQL depuis un fichier csv</title>
      <link>http://example.org/posts/2012-10-11-awk-creer-des-requetes-sql-depuis-un-fichier-csv/</link>
      <pubDate>Thu, 11 Oct 2012 16:31:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2012-10-11-awk-creer-des-requetes-sql-depuis-un-fichier-csv/</guid>
      <description>Par exemple :
$ cat masscomment.csv | tail -n +2 | awk &amp;#39;BEGIN {FS=&amp;#34;;&amp;#34; } ; { print &amp;#34;insert into descriptions (\&amp;#34;&amp;#34;$1&amp;#34;\&amp;#34;, \&amp;#34;&amp;#34;$2&amp;#34;\&amp;#34;, \&amp;#34;&amp;#34;$3&amp;#34;\&amp;#34;, \&amp;#34;&amp;#34;$4&amp;#34;\&amp;#34;);&amp;#34;}&amp;#39; | head insert into descriptions (&amp;#34;3900configb&amp;#34;, &amp;#34;Parametres&amp;#34;, &amp;#34;description&amp;#34;, &amp;#34;Descriptif du paramètre&amp;#34;); insert into descriptions (&amp;#34;3900configb&amp;#34;, &amp;#34;Parametres&amp;#34;, &amp;#34;valeur&amp;#34;, &amp;#34;Valeur du paramètre&amp;#34;); </description>
    </item>
    
    <item>
      <title>bash, supprimer les espaces en début de ligne</title>
      <link>http://example.org/posts/2012-09-06-bash-supprimer-les-espaces-en-debut-de-ligne/</link>
      <pubDate>Thu, 06 Sep 2012 10:33:00 +0100</pubDate>
      
      <guid>http://example.org/posts/2012-09-06-bash-supprimer-les-espaces-en-debut-de-ligne/</guid>
      <description>Pour supprimer les espaces en début de ligne&amp;hellip;
$ cat fichier | sed -e &amp;#39;s/^[ \t]*//g&amp;#39; $ cat fichier | sed -re &amp;#39;s/^[[:space:]]*//g&amp;#39; ou alors avec awk
$ cat fichier | awk -F &amp;#39;:&amp;#39; &amp;#39;{ gsub(/^[[:space:]]+$/,&amp;#34;&amp;#34;,$2); print $2; }&amp;#39; </description>
    </item>
    
  </channel>
</rss>
